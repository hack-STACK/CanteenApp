import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:kantin/Services/Auth/auth_Service.dart';
import 'package:kantin/Services/Auth/login_or_register.dart';
import 'package:kantin/Services/Database/firestore.dart'; // Import your Firestore service
import 'package:kantin/Models/menu.dart';
import 'package:kantin/Services/Database/menu_service.dart'; // Import your Menu model

class AdminDashboard extends StatelessWidget {
  const AdminDashboard({super.key});

  void logout(BuildContext context) async {
    final authService = AuthService();
    try {
      await authService.signOut();
      // Navigate to LoginOrRegister after logging out
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => const LoginOrRegister()),
        (route) => false, // Remove all previous routes
      );
    } catch (e) {
      // Handle logout error
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Error'),
          content: Text('Failed to logout: ${e.toString()}'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('OK'),
            ),
          ],
        ),
      );
    }
  }

  void _showAddMenuDialog(BuildContext context) {
    final TextEditingController nameController = TextEditingController();
    final TextEditingController descriptionController = TextEditingController();
    final TextEditingController priceController = TextEditingController();
    final TextEditingController imagePathController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Add Menu Item'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: InputDecoration(labelText: 'Name'),
              ),
              TextField(
                controller: descriptionController,
                decoration: InputDecoration(labelText: 'Description'),
              ),
              TextField(
                controller: priceController,
                decoration: InputDecoration(labelText: 'Price'),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: imagePathController,
                decoration: InputDecoration(labelText: 'Image URL'),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                // Handle adding the menu item
                final String name = nameController.text;
                final String description = descriptionController.text;
                final double price = double.tryParse(priceController.text) ?? 0.0;
                final String imagePath = imagePathController.text;

                if (name.isNotEmpty && description.isNotEmpty && price > 0) {
                  final newMenu = Menu(
                    id: '', // ID will be generated by Firestore
                    name: name,
                    description: description,
                    price: price,
                    imagePath: imagePath,
                  );

                  // Call the MenuService to add the menu item
                  MenuService().createMenu(newMenu).then((_) {
                    Navigator.pop(context); // Close the dialog
                    // Optionally show a success message
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Menu item added successfully!')),
                    );
                  }).catchError((error) {
                    // Handle error
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Failed to add menu item: $error')),
                    );
                  });
                } else {
                  // Show error message if fields are invalid
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Please fill in all fields correctly.')),
                  );
                }
              },
              child: Text('Add'),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('Cancel'),
            ),
 ],
        );
      },
    );
  }
void addMenuItem(Menu menu) async {
  final user = FirebaseAuth.instance.currentUser;
  if (user == null) {
    print("User is not authenticated");
    return; // Handle the case where the user is not authenticated
  }

  try {
    await FirebaseFirestore.instance.collection('menus').add(menu.toMap());
    print("Menu item added successfully");
  } catch (e) {
    print("Failed to add menu item: $e");
  }
}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Admin Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => logout(context), // Call logout function
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            Card(
              child: ListTile(
                title: const Text('Total Orders'),
                subtitle: const Text('100'), // Replace with dynamic data
              ),
            ),
            Card(
              child: ListTile(
                title: const Text('Active Users'),
                subtitle: const Text('50'), // Replace with dynamic data
              ),
            ),
            Card(
              child: ListTile(
                title: const Text('Total Revenue'),
                subtitle: const Text('Rp. 1,000,000'), // Replace with dynamic data
              ),
            ),
            ElevatedButton(
              onPressed: () => _showAddMenuDialog(context), // Show dialog to add menu
              child: const Text('Add Menu Item'),
            ),
            // Add more cards or widgets as needed
          ],
        ),
      ),
    );
  }
}